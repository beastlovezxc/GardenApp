// checksum 0xc01f version 0x90005
/*
  This file was generated by the Qt Quick 2 Application wizard of Qt Creator.
  QtQuick2ApplicationViewer is a convenience class containing mobile device specific
  code such as screen orientation handling. Also QML paths and debugging are
  handled here.
  It is recommended not to modify this file, since newer versions of Qt Creator
  may offer an updated version of it.
*/

#include "GQviewer.h"

#include <QtCore/QCoreApplication>
#include <QtCore/QDir>
#include <QtQml/QQmlEngine>
#include <QStringList>
#include <iostream>
#include <sys/types.h>
#include <unistd.h>

class QtQuick2ViewerPrivate
{
    QString mainQmlFile;
    friend class QtQuick2Viewer;
    static QString adjustPath(const QString &path);
};

QString QtQuick2ViewerPrivate::adjustPath(const QString &path)
{
#if defined(Q_OS_IOS)
    if (!QDir::isAbsolutePath(path))
        return QString::fromLatin1("%1/%2")
                .arg(QCoreApplication::applicationDirPath(), path);
#elif defined(Q_OS_MAC)
    if (!QDir::isAbsolutePath(path))
        return QString::fromLatin1("%1/qrc:/Resources/%2")
                .arg(QCoreApplication::applicationDirPath(), path);
#elif defined(Q_OS_BLACKBERRY)
    if (!QDir::isAbsolutePath(path))
        return QString::fromLatin1("app/native/%1").arg(path);
#elif !defined(Q_OS_ANDROID)
    QString pathInInstallDir =
            QString::fromLatin1("%1/qrc:/%2").arg(QCoreApplication::applicationDirPath(), path);
    if (QFileInfo(pathInInstallDir).exists())
        return pathInInstallDir;
    pathInInstallDir =
            QString::fromLatin1("%1/%2").arg(QCoreApplication::applicationDirPath(), path);
    if (QFileInfo(pathInInstallDir).exists())
        return pathInInstallDir;
#elif defined(Q_OS_ANDROID_NO_SDK)
    return QLatin1String("/data/user/qt/") + path;
#endif
    return path;
}

QtQuick2Viewer::QtQuick2Viewer(QWindow *parent)
    : QQuickView(parent)
{
    d = new QtQuick2ViewerPrivate();
    connect(engine(), SIGNAL(quit()), SLOT(close()));
//    connect(this,SIGNAL(frameSwapped()),this,SLOT(nf_frame_swap()));
    setResizeMode(QQuickView::SizeRootObjectToView);

}

QtQuick2Viewer::~QtQuick2Viewer()
{
    delete d;

}

void QtQuick2Viewer::setMainQmlFile(const QString &file)
{
    d->mainQmlFile = QtQuick2ViewerPrivate::adjustPath(file);
#if defined(Q_OS_ANDROID) && !defined(Q_OS_ANDROID_NO_SDK)
    setSource(QUrl(QLatin1String("assets:/")+d->mainQmlFile));
#else
    setSource(QUrl(d->mainQmlFile));
#endif
}

void QtQuick2Viewer::addImportPath(const QString &path)
{
    engine()->addImportPath(QtQuick2ViewerPrivate::adjustPath(path));
}

void QtQuick2Viewer::printImportPathList()
{
    std::cout << "printImportPathList" << std::endl;
    QStringList path = engine()->importPathList();

    QStringList::const_iterator constIterator;
    for (constIterator = path.constBegin(); constIterator != path.constEnd();
           ++constIterator)
    {
        std::cout << (*constIterator).toLocal8Bit().constData() << std::endl;
    }

}

void QtQuick2Viewer::showExpanded()
{
#if defined (Q_WS_SIMULATOR) || defined(Q_OS_QNX)
    //printf("111111111111111111");
    showFullScreen();
#else
    //printf("22222222");
    show();
#endif
}

void QtQuick2Viewer::hideExpanded()
{
    hide();
}

void QtQuick2Viewer::exposeEvent(QExposeEvent *ev)
{
//     printf("\ntid=%lu, pid=%lu exposeEvent window state[%d]\n", getppid(), getpid(),QWindow::windowState());
     QQuickView::exposeEvent(ev);

//     printf("QWindow::windowState() == [%d]\n",QWindow::windowState());
     if(QWindow::windowState() == Qt::WindowNoState 
       ||QWindow::windowState() == Qt::WindowMaximized
       ||QWindow::windowState() == Qt::WindowFullScreen
             ){/* normal */
         emit viewExpose();
     }
     else if(QWindow::windowState() == Qt::WindowMinimized){/* minilize */
         emit viewMinilize();
     }
}

void QtQuick2Viewer::resizeEvent(QResizeEvent *ev)
{
//         printf("\ntid=%lu, pid=%lu resizeEvent\n", getppid(), getpid());
         QQuickView::resizeEvent(ev);
         emit viewResize();
}

void QtQuick2Viewer::showEvent(QShowEvent *ev)
{

//    printf("\ntid=%lu, pid=%lu showEvent\n", getppid(), getpid());
    QQuickView::showEvent(ev);
    emit viewShow();
}
